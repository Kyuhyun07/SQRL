% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qrismb.R
\name{qrismb}
\alias{qrismb}
\title{Estimate a quantile regression estimator of residual lifetime from survival data}
\usage{
qrismb(
  formula,
  data,
  t0 = 0,
  Q = 0.5,
  ne = 100,
  init = "rq",
  method = "smooth"
)
}
\arguments{
\item{t0}{is the followup time(or basetime of analysis)}

\item{Q}{is the quantile}

\item{ne}{is number of multiplier bootstrapping for V matrix estimation}

\item{init}{is option for initial guess of regression parameter ("random" assumes all coefficients as random numbers, "one" assumes all coefficients as 1s, otherwise a solution from rq function)}

\item{method}{is option how to estimate coefficient and standard error of it
("nonsmooth" uses non-smooth estimating equation : L1-minimization method in coefficient estimation, and full multiplier bootstrap in standard error estimation.
"smooth" uses induced smoothed estimating equation : nonlinear equation solver in coefficient estimation and partial multiplier bootstrap in standard error estimation
"iterative" uses induced smoothed estmating eqution and iterative calculation updating coefficient and SE).}

\item{Z}{is a vector of observed time, which is minimum of failure time and censored time}

\item{nc}{is a number of covariates used in analysis}

\item{covariate}{is a matrix of covariate (# row = # of subject, # of column = # of covariate(nc))}

\item{D}{is a vector of censoring indicator (1 = not censored, 0 = censored)}
}
\value{
An object of class "\code{qrismb}" representing the fit.
The \code{qrismb} object is a list containing at least the following components:
\describe{
  \item{coefficient}{a vector of point estimates}
  \item{stderr}{a vector of standard error of point estiamtes}
  \item{iterno}{a number of itertation until convergence (only for iterative procedure)}
  }
}
\description{
Using two estimation methods
1. L1-minimization(non-smooth estimating equation)
2. Induced smoothing approach (smooth estimating equation)
}
\examples{
library(qrismb)

## Function to generate simulated data
## Time is the observed survival time
## Status is the censoring indicator
## X is the covariate
data.gen <- function(n) {
    r0 <- .2 * sqrt(log(2))
    r1 <- .1 * sqrt(log(2))
    dat <- data.frame(censoring = runif(n, 0, 24.35),
                      Time0 = sqrt(-log(1 - runif(n))),
                      X = rbinom(n, 1, .5))
    dat$Time0 <- ifelse(dat$X > 0, dat$Time0 / r1, dat$Time0 / r0)
    dat$Time <- pmin(dat$Time0, dat$censoring)
    dat$status <- 1 * (dat$Time0 < dat$censoring)
    subset(dat, select = c(Time, status, X))
}

dat <- data.gen(200)

fm <- Surv(Time, status) ~ X
fit1 <- qrismb(fm, data = dat, t0 = 1, Q = 0.5, ne = 200, "rq", "smooth")
fit2 <- qrismb(fm, data = dat, t0 = 1, Q = 0.5, ne = 200, "one", "nonsmooth")
fit3 <- qrismb(fm, data = dat, t0 = 1, Q = 0.5, ne = 200, "random", "iterative")

coef(fit1)
coef(fit2)

vcov(fit1)
vcov(fit2)

summary(fit1)
summary(fit2)

summary(fit3)

## Real data application
data(cancer, package = "survival")
lung2 <- subset(lung, select = c(time, status, age, sex))
## tidy up the data
lung2$status <- lung2$status - 1
lung2$sex <- lung2$sex - 1

fm <- Surv(time, status) ~ age + sex
fit1 <- qrismb(fm, data = lung2, t0 = 0, Q = 0.5, ne = 200, "rq", "smooth")
fit2 <- qrismb(fm, data = lung2, t0 = 30, Q = 0.5, ne = 200, "rq", "nonsmooth")
fit3 <- qrismb(fm, data = lung2, t0 = 100, Q = 0.5, ne = 200, "rq", "iterative")

coef(fit1)
coef(fit2)
}
