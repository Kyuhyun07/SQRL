% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qrismb.R
\name{qrismb}
\alias{qrismb}
\title{Estimate a quantile regression estimator of residual lifetime from survival data}
\usage{
qrismb(
  formula,
  data,
  t_0 = 0,
  Q = 0.5,
  ne = 100,
  init = "rq",
  method = "smooth"
)
}
\arguments{
\item{t_0}{is the followup time(or basetime of analysis)}

\item{Q}{is the quantile}

\item{ne}{is number of multiplier bootstrapping for V matrix estimation}

\item{init}{is option for initial guess of regression parameter ("random" assumes all coefficients as random numbers, "one" assumes all coefficients as 1s, otherwise a solution from rq function)}

\item{method}{is option how to estimate coefficient and standard error of it
("nonsmooth" uses non-smooth estimating equation : L1-minimization method in coefficient estimation, and full multiplier bootstrap in standard error estimation.
"smooth" uses induced smoothed estimating equation : nonlinear equation solver in coefficient estimation and partial multiplier bootstrap in standard error estimation
"iterative" uses induced smoothed estmating eqution and iterative calculation updating coefficient and SE).}

\item{Z}{is a vector of observed time, which is minimum of failure time and censored time}

\item{nc}{is a number of covariates used in analysis}

\item{covariate}{is a matrix of covariate (# row = # of subject, # of column = # of covariate(nc))}

\item{D}{is a vector of censoring indicator (1 = not censored, 0 = censored)}
}
\value{
An object of class "\code{qrismb}" representing the fit.
The \code{qrismb} object is a list containing at least the following components:
\describe{
  \item{coefficient}{a vector of point estimates}
  \item{stderr}{a vector of standard error of point estiamtes}
  \item{iterno}{a number of itertation until convergence (only for iterative procedure)}
  }
}
\description{
Using two estimation methods
1. L1-minimization(non-smooth estimating equation)
2. Induced smoothing approach (smooth estimating equation)
}
\examples{
#### 1. simulation data ####
# a single binary covariate with success probability 0.5.
# We generate failure time, T, from a Weibull distribution.
# Potential censoring time, C, from uniform (0,c) independently from T.
# Given condition r=rho_0, k=2, exp(beta_0)=5, exp(beta_1)=2

# 1.1 data generation function
data.gen<-function(samplesize, censor){
  sim=matrix(NA,samplesize,5)
  colnames(sim) = c("T","C","Z","X","censored")
  # Generate C_i
  sim[,2] = runif(samplesize,0,censor)
  # Covariates (Control=0, Treatment=1)
  sim[,4] = rbinom(samplesize,size=1,p=0.5)
  # Generate T_i (Given Condition r=rho_0, k=2, exp(beta_0)=5, exp(beta_1)=2))
  unif = runif(n=samplesize ,min = 0,max = 1)
  for (q in 1:samplesize){
    if (sim[q,4]==0){
      sim[q,1]={{-log(1-unif[q])}^(1/k)}/r.initial.0
    } else {
      sim[q,1]={{-log(1-unif[q])}^(1/k)}/r.initial.1
    }
  }
  # Generate Y_i (min(T,C))
  sim[,3] = apply(sim[,1:2], 1, FUN=min)
  # Censoring indicator (Censored=0, Not censored=1)
  sim[,5]=I(sim[,1]<sim[,2])
  # Ordering
  sim = sim[order(sim[,3]),]
  n = nrow(sim)
  sim = as.data.frame(sim)
  return(sim)
}

# 1.2 Given value
exp.beta.initial.0=5
exp.beta.initial.1=10
k=2
r.initial.0=(log(10/5))^(1/k)/exp.beta.initial.0
r.initial.1=(log(10/5))^(1/k)/exp.beta.initial.1
# c value of unif(0,c)
c=24.35
a<-data.gen(200,c)

fit1 <- qrismb(Surv(Z, censored)~X, data=a, 1, Q, 200, "rq", "smooth")
fit2 <- qrismb(Surv(Z, censored)~X, data=a, 2, Q, 200, "one", "nonsmooth")
fit3 <- qrismb(Surv(Z, censored)~X, data=a, 3, Q, 200, "random", "iterative")

data(cancer, package="survival")
lung_rev <- lung[,c(2,3,4,5,7,8,9)]
# delta : censored = 0, death = 1
lung_rev$status <- as.numeric(lung$status) - 1
# covariate 1 : age (39~82)
# covariate 2 : sex(male = 0, female = 1)
lung_rev$sex <- as.numeric(lung$sex) - 1
# covariate 3 : ph.karno: Karnofsky performance score (bad=0-good=100) rated by physician
# covariate 4 : pat.karno: Karnofsky performance score as rated by patient
# covariate 5 : meal.cal: Calories consumed at meals
# covariate 6 : wt.loss: Weight loss in last six months (pounds)

fit1 <- qrismb(Surv(time, status)~age+sex, data=lung_rev, 400, Q, 200, "rq", "smooth")
fit2 <- qrismb(Surv(time, status)~age+sex, data=lung_rev, 500, Q, 200, "one", "nonsmooth")
fit3 <- qrismb(Surv(time, status)~age+sex, data=lung_rev, 600, Q, 200, "random", "iterative")

coef(fit1)
coef(fit2)
}
